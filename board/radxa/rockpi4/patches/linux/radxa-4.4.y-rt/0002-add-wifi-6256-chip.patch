--- a/include/linux/rfkill-wlan.h
+++ b/include/linux/rfkill-wlan.h
@@ -5,6 +5,7 @@
 #include <linux/types.h>
 #include <linux/init.h>
 #include <linux/device.h>
+#include <linux/clk.h>
 
 struct rksdmmc_iomux {
     char    *name;  //set the MACRO of gpio
@@ -42,6 +43,7 @@
     struct rksdmmc_gpio   ANTSEL3;  //pin6--ANTSEL3 
     struct rksdmmc_gpio   GPS_LAN;  //pin33--GPS_LAN
     struct regmap *grf;
+	struct clk *ext_clk;
 };
 
 enum {
@@ -52,6 +54,7 @@
     WIFI_AP6212,
     WIFI_AP6234,
     WIFI_AP6255,
+	WIFI_AP6256,
     WIFI_AP6330,
     WIFI_AP6335,
     WIFI_AP6354,
@@ -73,6 +76,8 @@
     WIFI_RTL8812AU,
     WIFI_RTL_SERIES,
     WIFI_ESP8089,
+    WIFI_MVL88W8977,
+    WIFI_SSV6051,
     TYPE_MAX,
 };
 
@@ -82,6 +87,7 @@
 int rockchip_wifi_power(int on);
 int rockchip_wifi_set_carddetect(int val);
 int rockchip_wifi_get_oob_irq(void);
+int rockchip_wifi_get_oob_irq_flag(void);
 int rockchip_wifi_reset(int on);
 int rockchip_wifi_mac_addr(unsigned char *buf);
 void *rockchip_wifi_country_code(char *ccode);

--- a/net/rfkill/rfkill-wlan.c
+++ b/net/rfkill/rfkill-wlan.c
@@ -93,6 +93,8 @@
 		"ap6476"
 #elif defined(CONFIG_AP6493)
 		"ap6493"
+#elif defined(CONFIG_MVL88W8977)
+        "mvl88w8977"
 #else
         "wlan_default"
 #endif
@@ -116,6 +118,8 @@
 	type = WIFI_AP6234;
     } else if (strcmp(wifi_chip_type_string, "ap6255") == 0) {
 	type = WIFI_AP6255;
+    } else if (strcmp(wifi_chip_type_string, "ap6256") == 0) {
+	type = WIFI_AP6256;
     } else if (strcmp(wifi_chip_type_string, "ap6330") == 0) {
         type = WIFI_AP6330;
     } else if (strcmp(wifi_chip_type_string, "ap6335") == 0) {
@@ -154,6 +158,10 @@
         type = WIFI_RTL8812AU;                        
     } else if (strcmp(wifi_chip_type_string, "esp8089") == 0) {
         type = WIFI_ESP8089;
+    } else if (strcmp(wifi_chip_type_string, "mvl88w8977") == 0) {
+        type = WIFI_MVL88W8977;
+    } else if (strcmp(wifi_chip_type_string, "ssv6051") == 0) {
+        type = WIFI_SSV6051;
     } else {
         type = WIFI_AP6210;
     }
@@ -430,6 +438,22 @@
 }
 EXPORT_SYMBOL(rockchip_wifi_get_oob_irq);
 
+int rockchip_wifi_get_oob_irq_flag(void)
+{
+	struct rfkill_wlan_data *mrfkill = g_rfkill;
+	struct rksdmmc_gpio *wifi_int_irq;
+	int gpio_flags = -1;
+
+	if (mrfkill) {
+		wifi_int_irq = &mrfkill->pdata->wifi_int_b;
+		if (gpio_is_valid(wifi_int_irq->io))
+			gpio_flags = wifi_int_irq->enable;
+	}
+
+	return gpio_flags;
+}
+EXPORT_SYMBOL(rockchip_wifi_get_oob_irq_flag);
+
 /**************************************************************************
  *
  * Wifi Reset Func
@@ -466,7 +490,7 @@
 	if (ret != 6 || is_zero_ether_addr(addr)) {
 		LOG("%s: rk_vendor_read wifi mac address failed (%d)\n",
 		    __func__, ret);
-#ifdef RANDOM_ADDRESS_SAVE
+#ifdef CONFIG_WIFI_GENERATE_RANDOM_MAC_ADDR
 		random_ether_addr(addr);
 		LOG("%s: generate random wifi mac address: "
 		    "%02x:%02x:%02x:%02x:%02x:%02x\n",
@@ -575,6 +599,7 @@
     u32 value;
     int gpio,ret;
     enum of_gpio_flags flags;
+	u32 ext_clk_value = 0;
 
     if (!node)
         return -ENODEV;
@@ -650,9 +675,31 @@
         gpio = of_get_named_gpio_flags(node, "WIFI,host_wake_irq", 0, &flags);
         if (gpio_is_valid(gpio)){
 			data->wifi_int_b.io = gpio;
-			data->wifi_int_b.enable = flags;
+			data->wifi_int_b.enable = !flags;
 			LOG("%s: get property: WIFI,host_wake_irq = %d, flags = %d.\n", __func__, gpio, flags);
         } else data->wifi_int_b.io = -1;
+	}
+
+	data->ext_clk = devm_clk_get(dev, "clk_wifi");
+	if (IS_ERR(data->ext_clk)) {
+		LOG("%s: The ref_wifi_clk not found !\n", __func__);
+	} else {
+		of_property_read_u32(node, "ref-clock-frequency",
+				     &ext_clk_value);
+		if (ext_clk_value > 0) {
+			ret = clk_set_rate(data->ext_clk, ext_clk_value);
+			if (ret)
+				LOG("%s: set ref clk error!\n", __func__);
+			ret = clk_prepare_enable(data->ext_clk);
+			if (ret)
+				LOG("%s: enable ref clk error!\n", __func__);
+			/* WIFI clock (REF_CLKOUT) output enable.
+			 * 1'b0: drive disable
+			 * 1'b1: output enable
+			 */
+			if (of_machine_is_compatible("rockchip,rk3308"))
+				regmap_write(data->grf, 0x0314, 0x00020002);
+		}
 	}
 
     return 0;
