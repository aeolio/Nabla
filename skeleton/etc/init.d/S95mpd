#!/bin/sh
#
# mpd	Starts the music player demon.
#

# Sanity checks
test -f /usr/bin/mpd || exit 0
test -f /etc/mpd.conf || exit 0

MUSIC=music
HOTPLUG_DIR=/media

MPD_LIB="/var/lib/mpd"
MPD_LOG="/var/log/mpd"
MPD_RUN="/var/run/mpd"

WWW_ROOT="/var/www"
WWW_MUSIC=$WWW_ROOT/Music

MPD_MUSIC=$MPD_LIB/$MUSIC
PIDFILE=$MPD_RUN/pid

### initialize system variables
[ -f /etc/nabla.conf ] && . /etc/nabla.conf

### check if mpd is configured to run
[ "$NABLA_START_MUSICPLAYER" != "Y" ] && exit 0

### functions that are used in more than one init script
[ -x /etc/init.d/init_functions ] && . /etc/init.d/init_functions

# unmute all alsa devices found on machine
unmute() {
	local mixer="/usr/bin/amixer"
	local procfs="/proc/asound"

	sound_cards=$procfs/card[0-9]
	if [ -f $mixer ] && [ ! "$sound_cards" = "$(echo $sound_cards)" ] ; then
		# loop through all sound devices
		for card in `ls -d $sound_cards`; do
			# touch only USB devices
			if [ ! -f $card/usbid ]; then continue; fi
			# extract device id
			id=${card##*/card}
			# unmute all simple controls on this device
			amixer -c $id scontrols | sed -e 's/^Simple mixer control//' | while read line; do 
				amixer -c $id sset "$line" 100% unmute > /dev/null 2>&1
			done
		done
	fi
}

# create directories and link to music libraries
initialize() {
	mkdir -p $MPD_LIB && chown -R mpd:audio $MPD_LIB
	mkdir -p $MPD_LOG && chown -R mpd:audio $MPD_LOG
	mkdir -p $MPD_RUN && chown -R mpd:audio $MPD_RUN
	# this is the mpd link to the music directory
	if [ ! -h $MPD_MUSIC ]; then
		ln -s $HOTPLUG_DIR $MPD_MUSIC
	fi
	# this is the web server link to the music directory
	if [ ! -h $WWW_MUSIC ]; then
		ln -s $MPD_MUSIC $WWW_MUSIC
	fi
	# create ignore list
	echo "$NABLA_PARTITION" > $HOTPLUG_DIR/.mpdignore
	# library file attributes may be broken by import
	find $MPD_LIB -type f -exec chmod u=rw,g=rw,o=r {} \;
}

start() {
	echo -n "Starting mpd: "
	initialize
	unmute
	# set mpd priority limit below hard interrupt priority
	ulimit -HS -r $(eval $HARDIRQ_PRIORITY - 1)
	# mpd creates its own $PIDFILE, do not use --make-pidfile 
	start-stop-daemon --start --quiet --background --exec /usr/bin/mpd
	[ ! -z $(pidof mpd) ] && echo "OK" || echo "FAIL"
} 

stop() {
	echo -n "Stopping mpd: "
	start-stop-daemon --stop --quiet --pidfile $PIDFILE
	status=$?
	[ $? = 0 ] && echo "OK" || echo "FAIL"
} 

restart() {
	stop
	sleep 1
	start
}

case "$1" in
  start|stop|restart)
	"$1"
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?
