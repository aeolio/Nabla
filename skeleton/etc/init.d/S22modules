#!/bin/sh
########################################################################
# Begin /etc/init.d/S22modules
#
# Description : Module auto-loading script
#
# Authors	: Zack Winkles
#
# Version	: 00.01
#
# Notes	: copied from linuxfromscratch.org, removed imported functions
#
########################################################################

MODULES_CONF=/etc/modules.conf
NABLA_WAIT_INTERVAL=1500000

# Assure that the kernel has module support.
[ -e /proc/ksyms -o -e /proc/modules ] || exit 0

### read the configuration values
[ -x /etc/nabla.conf ] && . /etc/nabla.conf

case "${1}" in
	start)

		# Exit if there's no modules file or there are no
		# valid entries
		[ -r $MODULES_CONF ] &&
			egrep -qv '^($|#)' $MODULES_CONF ||
			exit 0

		echo -n "Loading modules:" 

		# Only try to load modules if the user has actually given us
		# some modules to load.
		while read module args; do

			# Ignore comments and blank lines.
			case "$module" in
				""|"#"*) continue ;;
			esac

			# Attempt to load the module, making
			# sure to pass any arguments provided.
			modprobe ${module} ${args} > /dev/null 2>&1

			# Print the module name if successful,
			# otherwise take note.
			if [ $? -eq 0 ]; then
				echo -n " ${module}"
			else
				failedmod="${failedmod} ${module}"
			fi
		done < $MODULES_CONF

		echo -n " "
		# Print a message about successfully loaded
		# modules on the correct line.
		echo "[OK]"

		# Print a failure message with a list of any
		# modules that may have failed to load.
		if [ -n "${failedmod}" ]; then
			echo -n "Failed to load modules:${failedmod}"
			echo "[FAIL]"
		fi
		# wait for the drivers to be registered
		usleep $NABLA_WAIT_INTERVAL
		;;

	stop)
		# do nothing, system is probably going down
		;;

	*)
		echo "Usage: ${0} {start|stop}"
		exit 1
		;;
esac

# End /etc/init.d/S22modules