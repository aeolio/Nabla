--- a/crypto/rand/rand_unix.c
+++ b/crypto/rand/rand_unix.c
@@ -388,7 +388,7 @@
 
     /* Linux supports this since version 3.17 */
 #  if defined(__linux) && defined(__NR_getrandom)
-    return syscall(__NR_getrandom, buf, buflen, 0);
+    return syscall(__NR_getrandom, buf, buflen, 0x0001);
 #  elif (defined(__FreeBSD__) || defined(__NetBSD__)) && defined(KERN_ARND)
     return sysctl_random(buf, buflen);
 #  else
@@ -409,6 +409,7 @@
 } random_devices[OSSL_NELEM(random_device_paths)];
 static int keep_random_devices_open = 1;
 
+#undef DEVRANDOM_WAIT
 #   if defined(__linux) && defined(DEVRANDOM_WAIT)
 static void *shm_addr;
 
@@ -634,7 +635,7 @@
         while (bytes_needed != 0 && attempts-- > 0) {
             buffer = rand_pool_add_begin(pool, bytes_needed);
             bytes = syscall_random(buffer, bytes_needed);
-            if (bytes > 0) {
+            if ((int) bytes > 0) {
                 rand_pool_add_end(pool, bytes, 8 * bytes);
                 bytes_needed -= bytes;
                 attempts = 3; /* reset counter after successful attempt */
