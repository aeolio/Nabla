The symbol USE_STRTOD_FOR_FROM_CHARS is initially not defined. 

#if _GLIBCXX_HAVE_USELOCALE
// FIXME: This should be reimplemented so it doesn't use strtod and newlocale.
// That will avoid the need for any memory allocation, meaning that the
// non-conforming errc::not_enough_memory result cannot happen.
# define USE_STRTOD_FOR_FROM_CHARS 1
#endif

It will not be set in this context, because the target system does not use locales 
(see <sysroot>/include/c++/13.1.0/i586-buildroot-linux-uclibc/bits/c++config.h, 
line 1388)

/* Define to 1 if you have the `uselocale' function. */
/* #undef _GLIBCXX_HAVE_USELOCALE */

This results in code for from_chars_strtod not being generated, and 
later to the following build error:

../../../../../libstdc++-v3/src/c++17/floating_from_chars.cc: In function ‘std::from_chars_result std::from_chars(const char*, const char*, _Float128&, chars_format)’:
../../../../../libstdc++-v3/src/c++17/floating_from_chars.cc:1281:10: error: ‘from_chars_strtod’ was not declared in this scope
 1281 |   return from_chars_strtod(first, last, value, fmt);
      |          ^~~~~~~~~~~~~~~~~
make[7]: *** [Makefile:587: floating_from_chars.lo] Error 1

Check USE_STRTOD_FOR_FROM_CHARS before using from_chars_strtod(). 

Signed-off-by: Andreas Ziegler <br015@umbiko.net>

--- a/libstdc++-v3/src/c++17/floating_from_chars.cc	2023-04-26 09:09:43.000000000 +0200
+++ b/libstdc++-v3/src/c++17/floating_from_chars.cc	2023-05-19 07:56:56.754330183 +0200
@@ -1264,6 +1264,8 @@
 __attribute__((alias ("_ZSt10from_charsPKcS0_RdSt12chars_format")));
 #endif
 
+#if defined(USE_STRTOD_FOR_FROM_CHARS)
+// otherwise there is no from_chars_strtod
 #ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
 from_chars_result
 from_chars(const char* first, const char* last, __ieee128& value,
@@ -1282,6 +1284,8 @@
 }
 #endif
 
+#endif // USE_STRTOD_FOR_FROM_CHARS
+
 #endif // USE_LIB_FAST_FLOAT || USE_STRTOD_FOR_FROM_CHARS
 
 _GLIBCXX_END_NAMESPACE_VERSION
