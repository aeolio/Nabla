--- a/src/thread/Name.hxx
+++ b/src/thread/Name.hxx
@@ -36,6 +36,10 @@
 #include "util/StringFormat.hxx"
 #endif
 
+#ifdef ENABLE_RTOPT
+#include "RealtimeOption.hxx"
+#endif
+
 static inline void
 SetThreadName(const char *name) noexcept
 {
@@ -49,6 +53,11 @@
 #else
 	pthread_setname_np(pthread_self(), name);
 #endif
+
+#ifdef ENABLE_RTOPT
+        RealtimeOption::ChangeThreadPriority(name);
+#endif
+
 #elif defined(HAVE_PRCTL) && defined(PR_SET_NAME)
 	prctl(PR_SET_NAME, (unsigned long)name, 0, 0, 0);
 #else
diff -Naur /tmp/mpd-0.23.2/src/thread/RealtimeOption.cxx build/mpd-0.23.2/src/thread/RealtimeOption.cxx
--- a/src/thread/RealtimeOption.cxx	1970-01-01 01:00:00.000000000 +0100
+++ b/src/thread/RealtimeOption.cxx	2021-10-23 14:07:04.120629388 +0200
@@ -0,0 +1,416 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+
+
+#include "config.h"
+
+#ifdef ENABLE_RTOPT
+
+#include "system/Error.hxx"
+#include "Log.hxx"
+#include "util/Domain.hxx"
+
+#include "config/Block.hxx"
+#include "config/Option.hxx"
+
+#include "Util.hxx"
+#include "Slack.hxx"
+#include "RealtimeOption.hxx"
+
+#include <sys/resource.h>
+#include <sys/mman.h>
+
+
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <assert.h>
+#include <sched.h>
+
+#include <string>
+#include <algorithm>
+#include <unordered_map>
+#include <vector>
+
+
+static constexpr Domain realtime_domain("realtimeoption");
+
+
+const std::unordered_map<std::string,int> RealtimeOption::policy_tbl = {
+	{ "OTHER",   SCHED_OTHER },
+	{ "FIFO" ,   SCHED_FIFO  },
+	{ "RR"   ,   SCHED_RR    },
+	{ "BATCH",   SCHED_BATCH },
+#ifdef SCHED_IDLE
+	{ "IDLE" ,   SCHED_IDLE }
+#endif
+};
+
+
+std::unordered_map<std::string, PriorityDef*> RealtimeOption::priority_tbl = {
+	{ "",   new PriorityDef("") }
+};
+
+bool RealtimeOption::enable_rtopt = false;
+bool RealtimeOption::enable_memlock = false;
+unsigned long RealtimeOption::stack_reserve = 0ul;
+unsigned long RealtimeOption::heap_reserve  = 0ul;
+
+
+// trim from end (in place)
+static inline std::string &
+rtrim(std::string &s) {
+	s.erase(std::find_if(s.rbegin(), s.rend(), [](int ch) {
+		return !std::isspace(ch);
+	}).base(), s.end());
+	return s;
+}
+
+static int
+strtonum(const char *str, unsigned long *ival) {
+	char *endptr = NULL;
+
+	*ival = strtoul(str, &endptr, 10);
+	return (*endptr == '\0') ? 0 : -1;
+}
+
+void
+RealtimeOption::SetUnlimited( const int target, const char *target_name) {
+	const rlimit unlimited = {
+		RLIM_INFINITY,
+		RLIM_INFINITY
+	};
+	const int res = setrlimit(target,&unlimited);
+	if ( res < 0 ) {
+		FmtError(realtime_domain, 
+			"SetUnlimited {} error {}\n", 
+			target_name, 
+			errno);
+	}
+}
+
+int
+RealtimeOption::GetPolicy(const char *name) {
+	int policy = RTOPT_DISABLE;
+	try {
+		policy = policy_tbl.at(std::string(name));
+	} catch (...) {
+	}
+	return policy;
+}
+
+std::string
+RealtimeOption::GetPolicyName(int policy) {
+	std::string name("UNDEF(" + std::to_string(policy) + ")");
+
+	for (auto &x : policy_tbl) {
+		if ( x.second == policy ) {
+			name = x.first;
+			break;
+		}
+	}
+	return name;
+}
+
+void
+RealtimeOption::SetOutputPriority(const ConfigData &config) {
+	auto &list = config.GetBlockList(ConfigBlockOption::AUDIO_OUTPUT);
+	if (! list.empty()) {
+		for (auto param = list.begin() ; param != list.end() ; ++param) {
+			const char *name = param->GetBlockValue("name");
+			const char *pval = param->GetBlockValue("priority");
+			if ( ( name != nullptr ) && ( pval != nullptr ) ) {
+				FmtDebug(realtime_domain, "Found output block {} ({})", name, pval);
+				std::string blockName = std::string(name);
+				std::string threadName = std::string("output:") + blockName.substr(0,9);
+				PriorityDef *pri = new PriorityDef(rtrim(threadName));
+				ParsePriority(pval, pri);
+				priority_tbl[pri->name] = pri;
+			} else {
+				FmtWarning(realtime_domain,
+					"SetOutputPriority: Missing \"name\" configuration\n");
+			}
+		}
+	}
+}
+
+static const char *parse_priority_msg = "ParsePriority({}): illegal priority name = '{}'   value = '{}'\n";
+
+void
+RealtimeOption::ParsePriority(const char *param, PriorityDef *priority) {
+
+	std::string paramstr(param);
+
+	int  policy_val;
+	unsigned  long priority_val;
+
+	priority->policy = RTOPT_DISABLE;
+	priority->priority = 0;
+	priority->timerslack = 0ul;
+
+
+	int pos = paramstr.find(':');
+	if ( pos < 0 ) {
+		return;
+	}
+
+	if ( (policy_val = GetPolicy(paramstr.substr(0,pos).c_str()))  == RTOPT_DISABLE ) {
+		FmtWarning(realtime_domain,
+			parse_priority_msg,
+			__LINE__,priority->name.c_str(),param);
+		return;
+	}
+
+	if ( strtonum(paramstr.substr(pos+1).c_str(), &priority_val) != 0 ) {
+		FmtWarning(realtime_domain,
+			parse_priority_msg,
+			__LINE__,priority->name.c_str(),param);
+		return;
+	}
+
+	if ( PriorityDef::isRealTime(policy_val) ) {
+		if ( isPriority(priority_val) ) {
+			priority->policy = policy_val;
+			priority->priority = priority_val;
+		} else {
+			FmtWarning(realtime_domain,
+				parse_priority_msg,
+				__LINE__,priority->name.c_str(),param);
+			return;
+		}
+	} else {
+		/*  OTHER, BATCH, IDLE   */
+		priority->policy = policy_val;
+		priority->timerslack = priority_val;
+	}
+}
+
+
+void
+RealtimeOption::SetParameter(const ConfigData &config) {
+
+	enable_rtopt = false;
+
+	const ConfigBlock *param = config.GetBlock(ConfigBlockOption::REALTIME_OPTION);
+
+	if ( param == NULL ) {
+		return;
+	}
+	enable_rtopt = true;
+
+	for ( BlockParam  val : param->block_params ) {
+
+		if ( val.name.compare("memlock") == 0 ) {
+			enable_memlock = param->GetBlockValue("memlock",false);
+		} else if ( val.name.compare("stack_reserve") == 0 ) {
+			stack_reserve = param->GetBlockValue("stack_reserve",0u) * 1024;
+		} else if ( val.name.compare("heap_reserve") == 0 ) {
+			heap_reserve = param->GetBlockValue("heap_reserve",0u) * 1024;
+		} else {
+			PriorityDef *pdef = SetThreadPriority(param,val.name);
+			if ( pdef != nullptr ) {
+				priority_tbl[pdef->name] = pdef;
+			}
+		}
+	}
+}
+
+
+PriorityDef *
+RealtimeOption::SetThreadPriority(const ConfigBlock *param,std::string name) {
+
+	const char *paramstr = param->GetBlockValue(name.c_str());
+	if ( paramstr == nullptr ) {
+		return nullptr;
+	}
+
+	auto idx = name.find("_priority");
+	if ( idx == std::string::npos ) {
+		return nullptr;
+	}
+
+	PriorityDef *pri = new PriorityDef(name.substr(0,idx));
+	ParsePriority(paramstr,pri);
+	return pri;
+}
+
+const PriorityDef *
+RealtimeOption::GetPriorityParam(const char *_key) {
+	PriorityDef *pdef = nullptr;
+
+	try {
+		auto key = std::string(_key);
+		auto pos = key.find(':');
+		pdef = priority_tbl[key];
+		/* 
+		 * try to find the generic definition for decoder threads; these 
+		 * contain the first seven characters of the audio_output name 
+		 */
+		if (pdef == nullptr && pos > 0) {
+			key = key.substr(0, pos);
+			pdef = priority_tbl[key];
+		}
+	} catch (...) {
+	}
+
+	return pdef;
+}
+
+void
+RealtimeOption::ResetLimit() {
+	SetUnlimited(RLIMIT_MEMLOCK,"memlock");
+	SetUnlimited(RLIMIT_RTPRIO, "rtprio");
+}
+
+void
+RealtimeOption::ChangePriority(const PriorityDef *priority) {
+	sched_param param = { priority->priority };
+
+	if ( priority->policy == SCHED_IDLE ) {
+		SetThreadIdlePriority();
+	} else {
+		int res = sched_setscheduler(0, priority->policy, &param);
+		if ( res < 0 ) {
+			FmtWarning(realtime_domain,
+				"ChangePriority: sched_setscheduler error errno = {}\n",
+				errno);
+		}
+	}
+}
+
+void
+RealtimeOption::PrintPriorityTbl() {
+
+	FmtDebug(realtime_domain,
+		"enable_rtopt: {}  enable_memlock: {}   stack_reserve: {}  heap_reserve: {}\n",
+		enable_rtopt,
+		enable_memlock,
+		stack_reserve,
+		heap_reserve);
+
+	for ( auto &x : priority_tbl ) {
+		FmtDebug(realtime_domain,
+			"thread name: '{}'  policy: {}  priority: {}  timerslack: {}\n",
+			x.second->name.c_str(),
+			GetPolicyName(x.second->policy).c_str(),
+			x.second->priority,
+			x.second->timerslack);
+	}
+}
+
+/**
+ * added configurtion data link
+ */
+void RealtimeOption::Initialize(const ConfigData &config) {
+	SetParameter(config);
+	if ( !isEnableRt() ) {
+		return;
+	}
+	SetOutputPriority(config);
+	ResetLimit();
+	PrintPriorityTbl();
+}
+
+
+void RealtimeOption::LockMemory() {
+	void *ptr = NULL;
+
+	if ( !isEnableRt() ) {
+		FmtDebug(realtime_domain,
+			"LockMemory: realtime_option disabled");
+		return;
+	}
+
+	if ( stack_reserve != (size_t)0 ) {
+		FmtDebug(realtime_domain,
+			"LockMemory: stack_reserve {}",stack_reserve);
+		bzero(alloca(stack_reserve), stack_reserve);
+	}
+
+	if ( heap_reserve != (size_t)0 ) {
+		FmtDebug(realtime_domain,
+			"LockMemory: heap_reserve {}",heap_reserve);
+		ptr = malloc(heap_reserve);
+		if ( ptr != NULL ) {
+			bzero(ptr, heap_reserve);
+			free(ptr);
+		} else {
+			FmtError(realtime_domain, 
+				"LockMemory: heap allocate error reserved size = {}",
+				heap_reserve);
+		}
+	}
+
+	if ( !isEnableMemLock() ) {
+		FmtDebug(realtime_domain,
+			"LockMemory: memlock disabled");
+		return;
+	}
+
+	FmtDebug(realtime_domain,"LockMemory: mlockall");
+	int stat = mlockall(MCL_CURRENT);
+	if ( stat < 0 ) {
+		FmtError(realtime_domain,
+			"LockMemory: mlockall error = {}\n",
+			errno);
+	}
+}
+
+/**
+ *
+ */
+void RealtimeOption::ChangeThreadPriority(const char *name) {
+
+	if ( !isEnableRt() ) {
+		return;
+	}
+
+	const PriorityDef *pdef = GetPriorityParam(name);
+	if ( pdef == nullptr ) {
+		FmtDebug(realtime_domain,
+			"ChangeThreadPriority: name '{}' not found in table\n", name);
+		return;
+	}
+
+	if ( !pdef->IsEnable() ) {
+		return;
+	}
+
+	FmtDebug(realtime_domain,
+		"ChangeThreadPriority: name {}  policy {}({})  priority {}\n",
+		pdef->name.c_str(), 
+		GetPolicyName(pdef->policy).c_str(), 
+		pdef->policy, 
+		pdef->priority);
+
+	ChangePriority(pdef);
+	unsigned long ts = pdef->getTimerSlack();
+	if (ts != 0ul ) {
+		FmtDebug(realtime_domain,
+			"SetThreadTimerSlackNS: name {}  policy {}({})  timerslack {}\n",
+			pdef->name.c_str(),
+			GetPolicyName(pdef->policy).c_str(),
+			pdef->policy,
+			pdef->timerslack);
+		SetThreadTimerSlackNS(ts);
+	}
+}
+
+#endif /* ENABLE_RTOPT */
diff -Naur /tmp/mpd-0.23.2/src/thread/RealtimeOption.hxx build/mpd-0.23.2/src/thread/RealtimeOption.hxx
--- a/src/thread/RealtimeOption.hxx	1970-01-01 01:00:00.000000000 +0100
+++ b/src/thread/RealtimeOption.hxx	2021-10-23 13:28:45.192731139 +0200
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+/*
+	mpd.conf
+
+	realtime_option {
+		main_priority        "POLICY:PRIORITY"
+		io_priority          "POLICY:PRIORITY"
+		decorder_priority    "POLICY:PRIORITY"
+		player_priority      "POLICY:PRIORITY"
+		update_priority      "POLICY:PRIORITY"
+
+		memlock              "yes" or "no"
+		stackreserve	       "1024"
+		heapreserve	       "10240"
+	}
+
+	POLICY ::= { "OTHER" | "FIFO" | "RR" | "BATCH" | "IDLE" }
+	PRIORITY ::= { OTHER | BATCH | IDLE | FIFO | RR }
+	TIMERSLACK ::= [1..99]
+
+	audio_output {
+		...
+		...
+		priority	"POLICY:PRIORITY"
+		timerslack	unsigned long(default value = 100)
+	}
+*/
+
+#ifndef REALTIMEOPTION_HXX_
+#define REALTIMEOPTION_HXX_
+
+#ifdef ENABLE_RTOPT
+
+#include "config/Block.hxx"
+#include "config/Data.hxx"
+
+#include <string>
+#include <unordered_map>
+
+#define RTOPT_DISABLE (-1)
+
+struct PriorityDef {
+	std::string	name;
+	int			policy;
+	int			priority;
+	unsigned long	timerslack;
+
+	PriorityDef(std::string _name)
+	//	:name(new std::string(_name)),
+		:name(_name),
+		policy(RTOPT_DISABLE),
+		priority(0),
+		timerslack(0u) {}
+
+	inline bool IsEnable() const noexcept {
+		return policy != RTOPT_DISABLE;
+	}
+
+	inline bool isRealTime() const noexcept {
+		return isRealTime(policy);
+	}
+
+	inline unsigned long getTimerSlack() const noexcept {
+		return isRealTime() ? 0ul : timerslack;
+	}
+
+	static bool isRealTime(int p) {
+		return (p == SCHED_FIFO) || (p == SCHED_RR);
+	}
+};
+
+
+struct RealtimeOption {
+
+public:
+	static void Initialize(const ConfigData &config);
+	static void LockMemory();
+	static void ChangeThreadPriority(const char *name);
+
+private:
+	static bool enable_rtopt;
+	static bool enable_memlock;
+	static unsigned long stack_reserve;
+	static unsigned long heap_reserve;
+
+	static const std::unordered_map<std::string,int> policy_tbl;
+	static std::unordered_map<std::string, PriorityDef*> priority_tbl;
+
+	static bool isEnableRt() { return enable_rtopt; }
+	static bool isEnableMemLock() { return enable_memlock; }
+
+	static bool isPriority(int priority) {
+		return ( priority >= 1) && ( priority <= 99 );
+	}
+
+	static void SetUnlimited( const int target, const char *target_name);
+	static int GetPolicy(const char *name);
+	static std::string GetPolicyName(int policy);
+	static void SetOutputPriority(const ConfigData &config);
+	static void ParsePriority(const char *param, PriorityDef *priority);
+	static void SetParameter(const ConfigData &config);
+	static PriorityDef *SetThreadPriority(const ConfigBlock *param,std::string name);
+	static const PriorityDef *GetPriorityParam(const char *key);
+	static void ResetLimit();
+	static void ChangePriority(const PriorityDef *priority);
+	static void PrintPriorityTbl();
+};
+
+#endif /* ENABLE_RTOPT */
+
+#endif /* REALTIMEOPTION_HXX_ */
