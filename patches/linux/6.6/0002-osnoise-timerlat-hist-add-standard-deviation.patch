Add standard deviation calculation and printout for osnoise and timerlat

Signed-off-by: Andreas Ziegler <br015@umbiko.net>
---
diff -Naur tools/tracing/rtla/src/osnoise_hist.c /home/iago/rpi64/build/linux-6.1.15/tools/tracing/rtla/src/osnoise_hist.c
--- a/tools/tracing/rtla/src/osnoise_hist.c	2023-03-07 09:14:07.769838499 +0100
+++ b/tools/tracing/rtla/src/osnoise_hist.c	2023-03-07 08:02:55.314455000 +0100
@@ -51,6 +51,7 @@
 
 	unsigned long long	min_sample;
 	unsigned long long	sum_sample;
+	unsigned long long	var_sample;
 	unsigned long long	max_sample;
 
 };
@@ -127,7 +128,7 @@
 {
 	struct osnoise_hist_params *params = tool->params;
 	struct osnoise_hist_data *data = tool->data;
-	unsigned long long total_duration;
+	unsigned long long total_duration, variance;
 	int entries = data->entries;
 	int bucket;
 	int *hist;
@@ -139,11 +140,13 @@
 		bucket = duration / data->bucket_size;
 
 	total_duration = duration * count;
+	variance = total_duration * duration;
 
 	hist = data->hist[cpu].samples;
 	data->hist[cpu].count += count;
 	update_min(&data->hist[cpu].min_sample, &duration);
 	update_sum(&data->hist[cpu].sum_sample, &total_duration);
+	update_sum(&data->hist[cpu].var_sample, &variance);
 	update_max(&data->hist[cpu].max_sample, &duration);
 
 	if (bucket < entries)
@@ -360,6 +363,31 @@
 
 		trace_seq_printf(trace->seq, "%9llu ", data->hist[cpu].max_sample);
 
+	}
+	trace_seq_printf(trace->seq, "\n");
+
+	/* standard deviation */
+	if (!params->no_index)
+		trace_seq_printf(trace->seq, "sd:   ");
+
+	for (cpu = 0; cpu < data->nr_cpus; cpu++) {
+		if (params->cpus && !CPU_ISSET(cpu, &params->monitored_cpus))
+			continue;
+
+		if (!data->hist[cpu].count)
+			continue;
+
+		double var = ((double) data->hist[cpu].var_sample) /
+			(data->hist[cpu].count-1);
+		double avg = ((double) data->hist[cpu].sum_sample) * 
+			data->hist[cpu].sum_sample /
+			(data->hist[cpu].count-1) /
+			data->hist[cpu].count;
+
+		if (data->hist[cpu].count)
+			trace_seq_printf(trace->seq, "%9.2f ", sqrth(var - avg));
+		else
+			trace_seq_printf(trace->seq, "        - ");
 	}
 	trace_seq_printf(trace->seq, "\n");
 	trace_seq_do_printf(trace->seq);
diff -Naur tools/tracing/rtla/src/timerlat_hist.c /home/iago/rpi64/build/linux-6.1.15/tools/tracing/rtla/src/timerlat_hist.c
--- a/tools/tracing/rtla/src/timerlat_hist.c	2023-03-07 09:14:49.023996902 +0100
+++ b/tools/tracing/rtla/src/timerlat_hist.c	2023-03-07 08:03:29.041735000 +0100
@@ -64,14 +64,17 @@
 
 	unsigned long long	min_irq;
 	unsigned long long	sum_irq;
+	unsigned long long	var_irq;
 	unsigned long long	max_irq;
 
 	unsigned long long	min_thread;
 	unsigned long long	sum_thread;
+	unsigned long long	var_thread;
 	unsigned long long	max_thread;
 
 	unsigned long long	min_user;
 	unsigned long long	sum_user;
+	unsigned long long	var_user;
 	unsigned long long	max_user;
 };
 
@@ -171,6 +174,7 @@
 {
 	struct timerlat_hist_params *params = tool->params;
 	struct timerlat_hist_data *data = tool->data;
+	unsigned long long variance;
 	int entries = data->entries;
 	int bucket;
 	int *hist;
@@ -180,24 +184,29 @@
 
 	if (data->bucket_size)
 		bucket = latency / data->bucket_size;
+
+	variance = latency * latency;
 
 	if (!context) {
 		hist = data->hist[cpu].irq;
 		data->hist[cpu].irq_count++;
 		update_min(&data->hist[cpu].min_irq, &latency);
 		update_sum(&data->hist[cpu].sum_irq, &latency);
+		update_sum(&data->hist[cpu].var_irq, &variance);
 		update_max(&data->hist[cpu].max_irq, &latency);
 	} else if (context == 1) {
 		hist = data->hist[cpu].thread;
 		data->hist[cpu].thread_count++;
 		update_min(&data->hist[cpu].min_thread, &latency);
 		update_sum(&data->hist[cpu].sum_thread, &latency);
+		update_sum(&data->hist[cpu].var_thread, &variance);
 		update_max(&data->hist[cpu].max_thread, &latency);
 	} else { /* user */
 		hist = data->hist[cpu].user;
 		data->hist[cpu].user_count++;
 		update_min(&data->hist[cpu].min_user, &latency);
 		update_sum(&data->hist[cpu].sum_user, &latency);
+		update_sum(&data->hist[cpu].var_user, &variance);
 		update_max(&data->hist[cpu].max_user, &latency);
 	}
 
@@ -395,6 +404,62 @@
 		if (params->user_hist)
 			trace_seq_printf(trace->seq, "%9llu ",
 					data->hist[cpu].max_user);
+	}
+	trace_seq_printf(trace->seq, "\n");
+
+	/* standard deviation */
+	if (!params->no_index)
+		trace_seq_printf(trace->seq, "sd:   ");
+
+	for (cpu = 0; cpu < data->nr_cpus; cpu++) {
+		if (params->cpus && !CPU_ISSET(cpu, &params->monitored_cpus))
+			continue;
+
+		if (!data->hist[cpu].irq_count 
+			&& !data->hist[cpu].thread_count 
+			&& !data->hist[cpu].user_count)
+			continue;
+
+		if (!params->no_irq) {
+			if (data->hist[cpu].irq_count) {
+				double var = ((double) data->hist[cpu].var_irq) / 
+					(data->hist[cpu].irq_count-1);
+				double avg = ((double) data->hist[cpu].sum_irq) * 
+					data->hist[cpu].sum_irq / 
+					((data->hist[cpu].irq_count-1) * data->hist[cpu].irq_count);
+				trace_seq_printf(trace->seq, "%9.2f ", sqrth(var - avg));
+			}
+			else
+				trace_seq_printf(trace->seq, "        - ");
+		}
+
+		if (!params->no_thread) {
+			if (data->hist[cpu].thread_count) {
+				double var = ((double) data->hist[cpu].var_thread) /
+					(data->hist[cpu].thread_count-1);
+				double avg = ((double) data->hist[cpu].sum_thread) *
+					data->hist[cpu].sum_thread /
+					(data->hist[cpu].thread_count-1) /
+					data->hist[cpu].thread_count;
+				trace_seq_printf(trace->seq, "%9.2f ", sqrth(var - avg));
+			}
+			else
+				trace_seq_printf(trace->seq, "        - ");
+		}
+
+		if (params->user_hist) {
+			if (data->hist[cpu].user_count) {
+				double var = ((double) data->hist[cpu].var_user) /
+					(data->hist[cpu].user_count-1);
+				double avg = ((double) data->hist[cpu].sum_user) *
+					data->hist[cpu].sum_user /
+					(data->hist[cpu].user_count-1) /
+					data->hist[cpu].user_count;
+				trace_seq_printf(trace->seq, "%9.2f ", sqrth(var - avg));
+			}
+			else
+				trace_seq_printf(trace->seq, "        - ");
+		}
 	}
 	trace_seq_printf(trace->seq, "\n");
 	trace_seq_do_printf(trace->seq);
diff -Naur tools/tracing/rtla/src/utils.c /home/iago/rpi64/build/linux-6.1.15/tools/tracing/rtla/src/utils.c
--- a/tools/tracing/rtla/src/utils.c	2023-03-03 11:52:25.000000000 +0100
+++ b/tools/tracing/rtla/src/utils.c	2023-03-07 08:54:21.051112944 +0100
@@ -817,3 +817,40 @@
 
 	return 1;
 }
+
+/*
+ * sqrth - calculate an estimate of the square root af a value
+ *
+ * This is used to calculate a rough estimate of the standard deviation
+ * from the variance. The objective is to not include the stdlib math 
+ * in a kernel build. The algorithm used is Heron's method. 
+ *
+ * Return: the square root of value with two-digit precision
+ */
+double sqrth(double value)
+{
+	int iterations = 10;
+	double precision = 0.01;
+	double d, last_estimate, next_estimate;
+
+	/* initial estimate */
+	if (value >= 1)
+		last_estimate = (1 + value) / 2;
+	else
+		last_estimate = (1 - value) / 2;
+
+	while (iterations--)
+	{
+		next_estimate = (value/last_estimate + last_estimate) / 2;
+
+		d = next_estimate - last_estimate;
+		if (d < 0)
+			d = (-d);
+		if (d < precision)
+			break;
+
+		last_estimate = next_estimate;
+	}
+
+	return (next_estimate);
+}
diff -Naur tools/tracing/rtla/src/utils.h /home/iago/rpi64/build/linux-6.1.15/tools/tracing/rtla/src/utils.h
--- a/tools/tracing/rtla/src/utils.h	2023-03-03 11:52:25.000000000 +0100
+++ b/tools/tracing/rtla/src/utils.h	2023-03-07 08:02:22.851169000 +0100
@@ -63,6 +63,7 @@
 int set_pid_cgroup(pid_t pid, const char *cgroup);
 int set_cpu_dma_latency(int32_t latency);
 int auto_house_keeping(cpu_set_t *monitored_cpus);
+double sqrth(double value);
 
 #define ns_to_usf(x) (((double)x/1000))
 #define ns_to_per(total, part) ((part * 100) / (double)total)
