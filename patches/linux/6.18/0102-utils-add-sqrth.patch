Add standard deviation calculation and printout for osnoise and timerlat

Signed-off-by: Andreas Ziegler <br015@umbiko.net>
---
diff -Naur tools/tracing/rtla/src/utils.c /home/iago/rpi64/build/linux-6.1.15/tools/tracing/rtla/src/utils.c
--- a/tools/tracing/rtla/src/utils.c	2023-03-03 11:52:25.000000000 +0100
+++ b/tools/tracing/rtla/src/utils.c	2023-03-07 08:54:21.051112944 +0100
@@ -959,3 +959,40 @@
 
 	return 1;
 }
+
+/*
+ * sqrth - calculate an estimate of the square root af a value
+ *
+ * This is used to calculate a rough estimate of the standard deviation
+ * from the variance. The objective is to not include the stdlib math 
+ * in a kernel build. The algorithm used is Heron's method. 
+ *
+ * Return: the square root of value with two-digit precision
+ */
+double sqrth(double value)
+{
+	int iterations = 10;
+	double precision = 0.01;
+	double d, last_estimate, next_estimate;
+
+	/* initial estimate */
+	if (value >= 1)
+		last_estimate = (1 + value) / 2;
+	else
+		last_estimate = (1 - value) / 2;
+
+	while (iterations--)
+	{
+		next_estimate = (value/last_estimate + last_estimate) / 2;
+
+		d = next_estimate - last_estimate;
+		if (d < 0)
+			d = (-d);
+		if (d < precision)
+			break;
+
+		last_estimate = next_estimate;
+	}
+
+	return (next_estimate);
+}
diff -Naur tools/tracing/rtla/src/utils.h /home/iago/rpi64/build/linux-6.1.15/tools/tracing/rtla/src/utils.h
--- a/tools/tracing/rtla/src/utils.h	2023-03-03 11:52:25.000000000 +0100
+++ b/tools/tracing/rtla/src/utils.h	2023-03-07 08:02:22.851169000 +0100
@@ -81,6 +81,7 @@
 static inline int have_libcpupower_support(void) { return 0; }
 #endif /* HAVE_LIBCPUPOWER_SUPPORT */
 int auto_house_keeping(cpu_set_t *monitored_cpus);
+double sqrth(double value);
 
 #define ns_to_usf(x) (((double)x/1000))
 #define ns_to_per(total, part) ((part * 100) / (double)total)
