The original file is provided by openssh, and
can be found in the Buildroot package directory.

Instead of creating an overlay file and having to check manually, whenever
changes are made within Buildroot, patch the master file with additional code

Upstream: configuration change

Signed-off-by: Andreas Ziegler <br025@umbiko.net>

--- a/etc/init.d/S50sshd
+++ b/etc/init.d/S50sshd
@@ -6,14 +6,56 @@
 DAEMON="sshd"
 PIDFILE="/var/run/$DAEMON.pid"
 
+# protocol 1 has been removed
+SSH_KEY_FILES="ssh_host_dsa_key \
+	ssh_host_ecdsa_key \
+	ssh_host_ed25519_key \
+	ssh_host_rsa_key"
+
+SSH_SERVER_DIR="/etc/ssh"
+SSH_CLIENT_DIR="/root/.ssh"
+PUBLIC_FILES="moduli ssh*_config *.pub"
+
 # Make sure the ssh-keygen program exists
 [ -f /usr/bin/ssh-keygen ] || exit 0
+
+# Make sure the SSH server directory exists
+mkdir -p $SSH_SERVER_DIR
+
+# key file permissions were lost during restore from FAT file system
+restore_key_permissions() {
+	ssh_dir="$1"
+	# first set all files to acessible by user only
+	ssh_pattern="$ssh_dir/*"
+	# if pattern can be expanded, files exist
+	[ ! "$ssh_pattern" = "$(echo $ssh_pattern)" ] && chmod 600 $ssh_pattern
+	# now add read permisson for public files
+	for ssh_file in $PUBLIC_FILES; do
+		ssh_pattern="$ssh_dir/$ssh_file"
+		[ ! "$ssh_pattern" = "$(echo $ssh_pattern)" ] && chmod a+r $ssh_pattern
+	done
+}
+
+# generate any missing keys
+generate_missing_keys() {
+	echo -n "Generating missing SSH keys "
+	for key_file in $SSH_KEY_FILES; do
+		if [ ! -f $SSH_SERVER_DIR/$key_file ] ; then
+			key_type=${key_file##ssh_host_}
+			key_type=${key_type%%_key}
+			echo -n "$key_type "
+			/usr/bin/ssh-keygen -t $key_type -f $SSH_SERVER_DIR/$key_file -C '' -N '' > /dev/null 2>&1
+		fi
+	done
+	echo "[OK]"
+}
 
 umask 077
 
 start() {
-	# Create any missing keys
-	/usr/bin/ssh-keygen -A
+	restore_key_permissions "$SSH_SERVER_DIR"
+	restore_key_permissions "$SSH_CLIENT_DIR"
+	generate_missing_keys
 
 	printf "Starting %s: " "$DAEMON"
 	start-stop-daemon --start --pidfile "$PIDFILE" \
@@ -63,18 +105,9 @@
 }
 
 case "$1" in
-	start)
-		start
-		;;
-	stop)
-		stop
-		;;
-	restart)
-		restart
-		;;
-	reload)
-		reload
-		;;
+	start|stop|restart|reload)
+		"$1"
+	;;
 	*)
 		echo "Usage: $0 {start|stop|restart|reload}"
 		exit 1
