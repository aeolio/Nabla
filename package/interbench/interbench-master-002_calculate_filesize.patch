--- interbench-master/interbench.c
+++ interbench-next/interbench.c
@@ -37,7 +37,6 @@
 #include <semaphore.h>
 #include <pthread.h>
 #include <math.h>
-#include <fenv.h>
 #include <signal.h>
 #include <sys/utsname.h>
 #include <sys/time.h>
@@ -46,6 +45,7 @@
 #include <sys/mman.h>
 #include <sys/wait.h>
 #include <sys/stat.h>
+#include <sys/statvfs.h>
 #include "interbench.h"
 
 #define MAX_UNAME_LENGTH	100
@@ -658,6 +658,8 @@
 			terminal_error("fopen");
 		if (stat(name, &statbuf) == -1)
 			terminal_fileopen_error(fp, "stat");
+		if (statbuf.st_blksize < MIN_BLK_SIZE)
+			statbuf.st_blksize = MIN_BLK_SIZE;
 		for (i = 0 ; i < mem; i++) {
 			if (fwrite(buf, statbuf.st_blksize, 1, fp) != 1)
 				terminal_fileopen_error(fp, "fwrite");
@@ -742,7 +744,7 @@
 	return NULL;
 }
 
-/* Create a ring of 4 processes that wake each other up in a circle */
+/* Create a ring of N processes that wake each other up in a circle */
 void emulate_ring(struct thread *th)
 {
 	sem_t *s = &th->sem.stop;
@@ -1186,11 +1188,25 @@
 			}
 		}
 	}
-	/* Limit filesize to 1GB */
-	if (ud.ram > 1000)
-		ud.filesize = 1000000;
-	else
-		ud.filesize = ud.ram;
+}
+
+void get_filesize( char *directory )
+{
+	struct statvfs fiData;
+	char path[256];
+
+	ud.filesize = 2^18;	/* limit filesize to 1GB */
+	strncpy(path, directory, sizeof(path)-1);
+	path[sizeof(path)-1] = '\0';
+	if( (statvfs(path,&fiData)) == 0 ) {
+		ud.filesize = fiData.f_bavail * fiData.f_bsize / KB;	/* blocks to kilobytes */
+		ud.filesize = ud.filesize * 49L /100L;	/* two files must co-exist, leave 2% margin */
+		if( ud.ram > 0 && ud.filesize > ud.ram )
+			ud.filesize = ud.ram;
+		fprintf(stderr, "\nCalculated file size %lu KB\n", ud.filesize);
+	} else {
+		fprintf(stderr, "\nFailed to stat %s:\n", path);
+	}
 }
 
 void get_logfilename(void)
@@ -1705,6 +1721,7 @@
 
 loops_known:
 	get_ram();
+	get_filesize(".");
 	get_logfilename();
 	create_read_file();
 	init_pipes();
