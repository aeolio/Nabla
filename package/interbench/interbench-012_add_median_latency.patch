--- interbench-master/interbench.c.orig	2021-10-31 11:15:50.609095000 +0100
+++ interbench-next/interbench.c	2021-10-31 11:27:07.799068075 +0100
@@ -56,6 +56,7 @@
 #define MB			(1024 * 1024)	/* 2^20 bytes */
 #define KB			1024
 #define MAX_MEM_IN_MB		(1024 * 64)	/* 64 GB */
+#define HISTOGRAM_SIZE		1000 /* we do not care about latencies exceeding 100 us */
 
 struct user_data {
 	unsigned long loops_per_ms;
@@ -83,11 +84,14 @@
 typedef struct cumulative_latency {
 	int samples;
 	double average_latency[THREADS *(THREADS-1)];
-	double max_latency;
+	unsigned long max_latency;
 	double variance[THREADS *(THREADS-1)];
 } latency_t;
 latency_t *pl;
 
+/* used to calculate median value, last slot contains overflow */
+unsigned long latency_histogram[HISTOGRAM_SIZE+1];
+
 /* Pipes main to/from load and bench processes */
 static int m2l[2], l2m[2], m2b[2], b2m[2];
 
@@ -396,6 +400,29 @@
 	return retval;
 }
 
+void set_median_latency( unsigned long latency )
+{
+	/* overflow */
+	if (latency > HISTOGRAM_SIZE)
+		latency = HISTOGRAM_SIZE;
+	latency_histogram[(int) latency] += 1;
+}
+
+int get_median_latency( unsigned long samples )
+{
+	int i;
+	unsigned long cumulative = 0;
+
+	for (i = 0 ; i < HISTOGRAM_SIZE; i++)
+	{
+		cumulative += latency_histogram[i];
+		if (cumulative > samples / 2)
+			break;
+	}
+
+	return i;			
+}
+
 unsigned long periodic_schedule(struct thread *th, unsigned long run_usecs,
 	unsigned long interval_usecs, unsigned long long deadline)
 {
@@ -473,6 +500,7 @@
 		tb->max_latency = latency;
 	tb->total_latency += latency;
 	tb->sum_latency_squared += latency * latency;
+	set_median_latency(latency);
 	tb->nr_samples++;
 
 	return deadline;
@@ -487,6 +515,8 @@
 		tb->missed_deadlines =
 		tb->missed_burns =
 		tb->nr_samples = 0;
+
+	memset(latency_histogram, 0, sizeof(latency_histogram));
 }
 
 void create_pthread(pthread_t  * thread, pthread_attr_t * attr,
@@ -607,6 +637,7 @@
 			tb->max_latency = latency;
 		tb->total_latency += latency;
 		tb->sum_latency_squared += latency * latency;
+		set_median_latency(latency);
 		tb->nr_samples++;
 		if (!trywait_sem(s))
 			return;
@@ -1106,7 +1137,8 @@
 	struct data_table *tbj;
 	// struct tk_thread *tk;
 	long double sd;
-	double average_latency, max_latency, deadlines_met, samples_met;
+	unsigned long max_latency;
+	double average_latency, deadlines_met, samples_met;
 
 	tbj = th->dt;
 	// tk = &th->tkthread;
@@ -1144,10 +1176,14 @@
 		deadlines_met = (double) tbj->deadlines_met /
 		    (double) (tbj->missed_deadlines + tbj->deadlines_met) * 100.0;
 
+	/* calculate median value */
+	int k = get_median_latency(tbj->nr_samples);
+
 	/* record cumulative latency values */
 	int i = pl->samples;	
 	pl->average_latency[i] = average_latency;
-	pl->max_latency = fmax(max_latency, pl->max_latency);
+	if( max_latency > pl->max_latency)
+		pl->max_latency = max_latency;
 	pl->variance[i] = (double) (sd * sd);
 	pl->samples += 1;
 
@@ -1158,10 +1194,11 @@
 	 */
 	log_output("%6.1f +/- ", average_latency);
 	log_output("%-8.5g", (double) sd);
-	log_output("%6.1f\t", max_latency);
+	log_output("%4d", k);
+	log_output("%5lu\t", max_latency);
 	log_output("\t%4.3g", samples_met);
 	if (!th->nodeadlines)
-		log_output("\t%11.3g", deadlines_met);
+		log_output("\t%9.3g", deadlines_met);
 	log_output("\n");
 	sync_flush();
 }
@@ -1840,14 +1877,11 @@
 		char *str_time = ud.do_rt ? "100" : "us";
 
 		log_output("Load");
-		if (ud.do_rt)
-			log_output("\tLatency +/- SD (us)");
-		else
-			log_output("\tLatency +/- SD (ms)");
-		log_output("  Max Latency ");
-		log_output("  %% Desired CPU");
+		log_output("\tLatency +/- SD ");
+		log_output("  median  max [%s]", str_time);
+		log_output("\tDesired CPU");
 		if (!thi->nodeadlines)
-			log_output("  %% Deadlines Met");
+			log_output("  Deadlines met [%%]");
 		log_output("\n");
 
 		for (j = 0 ; j < THREADS ; j++) {
@@ -1867,8 +1901,8 @@
 	/* 
 		Print cumulative latency value. This assumes that number of samples N in 
 		each set is fairly equal (which should be given by the nature of the data)
-		mu_total = Sigma(i=1..k) [mu(i) * N(i)] / Sigma(i=1..k) [N(i)]
-		variance = Sigma(j=1..k) [N(i) * s(i)^2] + Sigma(j=1..k) [N(j) * (mu(j) - mu_total)^2]
+		mu_total = Sigma(i=1..k) [mu(i) * N(i)] / Sigma(j=1..k) [N(j)]
+		variance = Sigma(i=1..k) [N(i) * s(i)^2] + Sigma(j=1..k) [N(j) * (mu(j) - mu_total)^2]
 		with k the number of samples, mu and s mean value and standard derivation of each set
 	*/
 	if (pl->samples) {
@@ -1882,7 +1916,8 @@
 		log_output("\t");
 		log_output("%6.1f +/- ", average_latency);
 		log_output("%-8.5g", sqrt(deviance / pl->samples));
-		log_output("%6.1f\n", pl->max_latency);
+		log_output("%4s", ""); /* median */
+		log_output("%5lu\n", pl->max_latency);
 	}	
 	log_output("\n");
 
