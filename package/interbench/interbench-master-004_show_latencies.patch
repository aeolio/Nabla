--- interbench-master/interbench.c
+++ interbench-next/interbench.c
@@ -23,6 +23,8 @@
 #define _GNU_SOURCE
 #define _FILE_OFFSET_BITS 64	/* Large file support */
 #define INTERBENCH_VERSION	"0.31"
+#define STANDARD_GRANULARITY 1000.0L /* ms */
+#define REALTIME_GRANULARITY 1.0L /* us */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -1080,15 +1082,18 @@
 void show_latencies(struct thread *th)
 {
 	struct data_table *tbj;
-	double average_latency, deadlines_met, samples_met, sd, max_latency;
-	long double variance = 0;
+	struct tk_thread *tk;
+	long double sd;
+	double average_latency, max_latency, deadlines_met, samples_met;
 
 	tbj = th->dt;
+	tk = &th->tkthread;
 
 	if (tbj->nr_samples > 1) {
-		average_latency = tbj->total_latency / tbj->nr_samples;
-		variance = (tbj->sum_latency_squared - (average_latency *
-			average_latency) / tbj->nr_samples) / (tbj->nr_samples - 1);
+		average_latency = (double) tbj->total_latency / (double) tbj->nr_samples;
+		long double variance = ((long double) tbj->sum_latency_squared - 
+			((long double) tbj->total_latency * (long double) tbj->total_latency) / 
+			(long double) tbj->nr_samples) / (long double) (tbj->nr_samples - 1);
 		sd = sqrtl(variance);
 	} else {
 		average_latency = tbj->total_latency;
@@ -1100,22 +1105,22 @@
 	 * to do more work than unloaded due to tiny duration differences.
 	 */
 	if (tbj->achieved_burns > 0)
-		samples_met = (double)tbj->achieved_burns /
-		    (double)(tbj->achieved_burns + tbj->missed_burns) * 100;
+		samples_met = (double) tbj->achieved_burns /
+		    (double) (tbj->achieved_burns + (double) tbj->missed_burns) * 100.0;
 	else
 		samples_met = 0.0;
 	max_latency = tbj->max_latency;
 	/* When benchmarking rt we represent the data in us */
 	if (!ud.do_rt) {
-		average_latency /= 1000;
-		sd /= 1000;
-		max_latency /= 1000;
+		average_latency /= STANDARD_GRANULARITY;
+		sd /= STANDARD_GRANULARITY;
+		max_latency /= STANDARD_GRANULARITY;
 	}
 	if (tbj->deadlines_met == 0)
 		deadlines_met = 0;
 	else
-		deadlines_met = (double)tbj->deadlines_met /
-		    (double)(tbj->missed_deadlines + tbj->deadlines_met) * 100;
+		deadlines_met = (double) tbj->deadlines_met /
+		    (double) (tbj->missed_deadlines + tbj->deadlines_met) * 100.0;
 
 	/*
 	 * Messy nonsense to format the output nicely. Values less than 1ms
@@ -1123,7 +1128,7 @@
 	 * time tests are below noise, so round off to integers.
 	 */
 	log_output("%6.1f +/- ", average_latency);
-	log_output("%-8.1f", sd);
+	log_output("%-8.5g", (double) sd);
 	log_output("%6.1f\t", max_latency);
 	log_output("\t%4.3g", samples_met);
 	if (!th->nodeadlines)
